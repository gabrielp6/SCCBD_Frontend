{"ast":null,"code":"import _asyncToGenerator from \"C:/SCCBD/PROYECTO FINAL/Proyecto_Ciber-main2222/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as rsa from 'my-rsa';\nimport * as bc from 'bigint-conversion';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RsaService {\n  constructor(http) {\n    this.http = http;\n    this.URI = \"http://localhost:4000\";\n    this.initialized = new Promise((resolve, reject) => {\n      this.init().then(() => {\n        resolve();\n      }).catch(() => {\n        reject();\n      });\n    });\n  }\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const keyPair = yield rsa.generateKeys();\n      _this.privateKey = keyPair.privateKey;\n      _this.publicKey = keyPair.publicKey; //Obtener las clave publica\n\n      const receivedPublicKey = yield firstValueFrom(_this.getPublicKey());\n      _this.serverPublicKey = jsonToPublicKey(receivedPublicKey);\n      console.log(_this.publicKey);\n      console.log(_this.privateKey);\n      console.log(_this.serverPublicKey);\n    })();\n  }\n\n  mensajeCifrado(mensaje, pubKey) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.initialized;\n      console.log(\"Service\");\n      console.log(mensaje);\n      const path = `${_this2.URI}/rsa/encrypt`;\n      return _this2.http.post(path, {\n        message: mensaje,\n        pubKey: publicKeyToJson(pubKey)\n      });\n    })();\n  }\n\n  decrypt(mensaje) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.initialized;\n      console.log(\"Send encrypted. Wait decrypted\");\n      return yield firstValueFrom(_this3.http.post(_this3.URI + '/rsa/decrypt', {\n        message: mensaje\n      }));\n    })();\n  }\n\n  sign(mensaje) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"Firma\");\n      return _this4.http.post(_this4.URI + '/rsa/sign', {\n        message: mensaje\n      });\n    })();\n  }\n\n  firmaciega(mensaje) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.initialized;\n      console.log(\"Firma ciega\");\n      console.log(mensaje);\n      return _this5.http.post(_this5.URI + '/rsa/sign', {\n        message: mensaje\n      });\n    })();\n  }\n\n  verify(mensaje, pubKey) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.initialized;\n      return _this6.http.post(_this6.URI + '/rsa/verify', {\n        message: mensaje,\n        pubKey: publicKeyToJson(pubKey)\n      });\n    })();\n  }\n\n  getPublicKey() {\n    return this.http.get(this.URI + \"/rsa/publickey\");\n  }\n\n}\n\nRsaService.ɵfac = function RsaService_Factory(t) {\n  return new (t || RsaService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nRsaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RsaService,\n  factory: RsaService.ɵfac,\n  providedIn: 'root'\n});\n\nfunction publicKeyToJson(pubKey) {\n  return {\n    e: bc.bigintToHex(pubKey.e),\n    n: bc.bigintToHex(pubKey.e)\n  };\n}\n\nfunction jsonToPublicKey(pubKeyJson) {\n  return new rsa.PublicKey(bc.hexToBigint(pubKeyJson.e), bc.hexToBigint(pubKeyJson.n));\n}","map":{"version":3,"sources":["C:/SCCBD/PROYECTO FINAL/Proyecto_Ciber-main2222/frontend/src/app/services/rsa.service.ts"],"names":["rsa","bc","firstValueFrom","i0","i1","RsaService","constructor","http","URI","initialized","Promise","resolve","reject","init","then","catch","keyPair","generateKeys","privateKey","publicKey","receivedPublicKey","getPublicKey","serverPublicKey","jsonToPublicKey","console","log","mensajeCifrado","mensaje","pubKey","path","post","message","publicKeyToJson","decrypt","sign","firmaciega","verify","get","ɵfac","RsaService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","e","bigintToHex","n","pubKeyJson","PublicKey","hexToBigint"],"mappings":"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","sourcesContent":["import * as rsa from 'my-rsa';\r\nimport * as bc from 'bigint-conversion';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class RsaService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.URI = \"http://localhost:4000\";\r\n        this.initialized = new Promise((resolve, reject) => {\r\n            this.init().then(() => {\r\n                resolve();\r\n            }).catch(() => {\r\n                reject();\r\n            });\r\n        });\r\n    }\r\n    async init() {\r\n        const keyPair = await rsa.generateKeys();\r\n        this.privateKey = keyPair.privateKey;\r\n        this.publicKey = keyPair.publicKey;\r\n        //Obtener las clave publica\r\n        const receivedPublicKey = await firstValueFrom(this.getPublicKey());\r\n        this.serverPublicKey = jsonToPublicKey(receivedPublicKey);\r\n        console.log(this.publicKey);\r\n        console.log(this.privateKey);\r\n        console.log(this.serverPublicKey);\r\n    }\r\n    async mensajeCifrado(mensaje, pubKey) {\r\n        await this.initialized;\r\n        console.log(\"Service\");\r\n        console.log(mensaje);\r\n        const path = `${this.URI}/rsa/encrypt`;\r\n        return this.http.post(path, {\r\n            message: mensaje,\r\n            pubKey: publicKeyToJson(pubKey)\r\n        });\r\n    }\r\n    async decrypt(mensaje) {\r\n        await this.initialized;\r\n        console.log(\"Send encrypted. Wait decrypted\");\r\n        return await firstValueFrom(this.http.post(this.URI + '/rsa/decrypt', {\r\n            message: mensaje\r\n        }));\r\n    }\r\n    async sign(mensaje) {\r\n        console.log(\"Firma\");\r\n        return this.http.post(this.URI + '/rsa/sign', {\r\n            message: mensaje\r\n        });\r\n    }\r\n    async firmaciega(mensaje) {\r\n        await this.initialized;\r\n        console.log(\"Firma ciega\");\r\n        console.log(mensaje);\r\n        return this.http.post(this.URI + '/rsa/sign', {\r\n            message: mensaje\r\n        });\r\n    }\r\n    async verify(mensaje, pubKey) {\r\n        await this.initialized;\r\n        return this.http.post(this.URI + '/rsa/verify', {\r\n            message: mensaje,\r\n            pubKey: publicKeyToJson(pubKey)\r\n        });\r\n    }\r\n    getPublicKey() {\r\n        return this.http.get(this.URI + \"/rsa/publickey\");\r\n    }\r\n}\r\nRsaService.ɵfac = function RsaService_Factory(t) { return new (t || RsaService)(i0.ɵɵinject(i1.HttpClient)); };\r\nRsaService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RsaService, factory: RsaService.ɵfac, providedIn: 'root' });\r\nfunction publicKeyToJson(pubKey) {\r\n    return {\r\n        e: bc.bigintToHex(pubKey.e),\r\n        n: bc.bigintToHex(pubKey.e)\r\n    };\r\n}\r\nfunction jsonToPublicKey(pubKeyJson) {\r\n    return new rsa.PublicKey(bc.hexToBigint(pubKeyJson.e), bc.hexToBigint(pubKeyJson.n));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}