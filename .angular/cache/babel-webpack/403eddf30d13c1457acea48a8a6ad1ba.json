{"ast":null,"code":"import _asyncToGenerator from \"C:/SCCBD/PROYECTO FINAL/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as rsa from 'my-modulos';\nimport * as bc from 'bigint-conversion';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VotosService {\n  constructor(http) {\n    this.http = http;\n    this.URI = \"http://localhost:3000\";\n  }\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const keyPair = yield rsa.generateKeys();\n      _this.privateKey = keyPair.privateKey;\n      _this.publicKey = keyPair.publicKey;\n      const receivedPublicKey = yield firstValueFrom(_this.getPublicKey());\n      _this.serverPublicKey = jsonToPublicKey(receivedPublicKey);\n      console.log(\"Parametros de Public key: \" + \"\\ne: \" + _this.publicKey.e + \"\\nm: \" + _this.publicKey.n);\n      console.log(\"Parametros de Private key: \" + \"\\nd: \" + _this.privateKey.d + \"\\nn: \" + _this.privateKey.n);\n    })();\n  }\n\n  decrypt(mensaje) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield firstValueFrom(_this2.http.post(_this2.URI + '/votos/decrypt', {\n        message: mensaje\n      }));\n    })();\n  }\n\n  sign(mensaje) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.http.post(_this3.URI + '/votos/sign', {\n        message: mensaje\n      });\n    })();\n  }\n\n  verify(mensaje, pubKey) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4.http.post(_this4.URI + '/votos/verify', {\n        message: mensaje,\n        pubKey: publicKeyToJson(pubKey)\n      });\n    })();\n  }\n\n  getPublicKey() {\n    return this.http.get(this.URI + \"/votos/publickey\");\n  }\n\n}\n\nVotosService.ɵfac = function VotosService_Factory(t) {\n  return new (t || VotosService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nVotosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VotosService,\n  factory: VotosService.ɵfac,\n  providedIn: 'root'\n});\n\nfunction publicKeyToJson(pubKey) {\n  return {\n    e: bc.bigintToHex(pubKey.e),\n    n: bc.bigintToHex(pubKey.e)\n  };\n}\n\nfunction jsonToPublicKey(pubKeyJson) {\n  return new rsa.PublicKey(bc.hexToBigint(pubKeyJson.e), bc.hexToBigint(pubKeyJson.n));\n}","map":{"version":3,"sources":["C:/SCCBD/PROYECTO FINAL/frontend/src/app/services/votos.service.ts"],"names":["rsa","bc","firstValueFrom","i0","i1","VotosService","constructor","http","URI","init","keyPair","generateKeys","privateKey","publicKey","receivedPublicKey","getPublicKey","serverPublicKey","jsonToPublicKey","console","log","e","n","d","decrypt","mensaje","post","message","sign","verify","pubKey","publicKeyToJson","get","ɵfac","VotosService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","bigintToHex","pubKeyJson","PublicKey","hexToBigint"],"mappings":";AAAA,OAAO,KAAKA,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,uBAAX;AACH;;AACKC,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,YAAMC,OAAO,SAASV,GAAG,CAACW,YAAJ,EAAtB;AACA,MAAA,KAAI,CAACC,UAAL,GAAkBF,OAAO,CAACE,UAA1B;AACA,MAAA,KAAI,CAACC,SAAL,GAAiBH,OAAO,CAACG,SAAzB;AACA,YAAMC,iBAAiB,SAASZ,cAAc,CAAC,KAAI,CAACa,YAAL,EAAD,CAA9C;AACA,MAAA,KAAI,CAACC,eAAL,GAAuBC,eAAe,CAACH,iBAAD,CAAtC;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+B,OAA/B,GAAyC,KAAI,CAACN,SAAL,CAAeO,CAAxD,GAA4D,OAA5D,GAAsE,KAAI,CAACP,SAAL,CAAeQ,CAAjG;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC,OAAhC,GAA0C,KAAI,CAACP,UAAL,CAAgBU,CAA1D,GAA8D,OAA9D,GAAwE,KAAI,CAACV,UAAL,CAAgBS,CAApG;AAPS;AAQZ;;AACKE,EAAAA,OAAO,CAACC,OAAD,EAAU;AAAA;;AAAA;AACnB,mBAAatB,cAAc,CAAC,MAAI,CAACK,IAAL,CAAUkB,IAAV,CAAe,MAAI,CAACjB,GAAL,GAAW,gBAA1B,EAA4C;AAAEkB,QAAAA,OAAO,EAAEF;AAAX,OAA5C,CAAD,CAA3B;AADmB;AAEtB;;AACKG,EAAAA,IAAI,CAACH,OAAD,EAAU;AAAA;;AAAA;AAChB,aAAO,MAAI,CAACjB,IAAL,CAAUkB,IAAV,CAAe,MAAI,CAACjB,GAAL,GAAW,aAA1B,EAAyC;AAAEkB,QAAAA,OAAO,EAAEF;AAAX,OAAzC,CAAP;AADgB;AAEnB;;AACKI,EAAAA,MAAM,CAACJ,OAAD,EAAUK,MAAV,EAAkB;AAAA;;AAAA;AAC1B,aAAO,MAAI,CAACtB,IAAL,CAAUkB,IAAV,CAAe,MAAI,CAACjB,GAAL,GAAW,eAA1B,EAA2C;AAAEkB,QAAAA,OAAO,EAAEF,OAAX;AAAoBK,QAAAA,MAAM,EAAEC,eAAe,CAACD,MAAD;AAA3C,OAA3C,CAAP;AAD0B;AAE7B;;AACDd,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKR,IAAL,CAAUwB,GAAV,CAAc,KAAKvB,GAAL,GAAW,kBAAzB,CAAP;AACH;;AAzBqB;;AA2B1BH,YAAY,CAAC2B,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,YAAV,EAAwBF,EAAE,CAACgC,QAAH,CAAY/B,EAAE,CAACgC,UAAf,CAAxB,CAAP;AAA6D,CAApH;;AACA/B,YAAY,CAACgC,KAAb,GAAqB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,YAAT;AAAuBmC,EAAAA,OAAO,EAAEnC,YAAY,CAAC2B,IAA7C;AAAmDS,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC;;AACA,SAASX,eAAT,CAAyBD,MAAzB,EAAiC;AAC7B,SAAO;AACHT,IAAAA,CAAC,EAAEnB,EAAE,CAACyC,WAAH,CAAeb,MAAM,CAACT,CAAtB,CADA;AAEHC,IAAAA,CAAC,EAAEpB,EAAE,CAACyC,WAAH,CAAeb,MAAM,CAACT,CAAtB;AAFA,GAAP;AAIH;;AACD,SAASH,eAAT,CAAyB0B,UAAzB,EAAqC;AACjC,SAAO,IAAI3C,GAAG,CAAC4C,SAAR,CAAkB3C,EAAE,CAAC4C,WAAH,CAAeF,UAAU,CAACvB,CAA1B,CAAlB,EAAgDnB,EAAE,CAAC4C,WAAH,CAAeF,UAAU,CAACtB,CAA1B,CAAhD,CAAP;AACH","sourcesContent":["import * as rsa from 'my-modulos';\r\nimport * as bc from 'bigint-conversion';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class VotosService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.URI = \"http://localhost:3000\";\r\n    }\r\n    async init() {\r\n        const keyPair = await rsa.generateKeys();\r\n        this.privateKey = keyPair.privateKey;\r\n        this.publicKey = keyPair.publicKey;\r\n        const receivedPublicKey = await firstValueFrom(this.getPublicKey());\r\n        this.serverPublicKey = jsonToPublicKey(receivedPublicKey);\r\n        console.log(\"Parametros de Public key: \" + \"\\ne: \" + this.publicKey.e + \"\\nm: \" + this.publicKey.n);\r\n        console.log(\"Parametros de Private key: \" + \"\\nd: \" + this.privateKey.d + \"\\nn: \" + this.privateKey.n);\r\n    }\r\n    async decrypt(mensaje) {\r\n        return await firstValueFrom(this.http.post(this.URI + '/votos/decrypt', { message: mensaje }));\r\n    }\r\n    async sign(mensaje) {\r\n        return this.http.post(this.URI + '/votos/sign', { message: mensaje });\r\n    }\r\n    async verify(mensaje, pubKey) {\r\n        return this.http.post(this.URI + '/votos/verify', { message: mensaje, pubKey: publicKeyToJson(pubKey) });\r\n    }\r\n    getPublicKey() {\r\n        return this.http.get(this.URI + \"/votos/publickey\");\r\n    }\r\n}\r\nVotosService.ɵfac = function VotosService_Factory(t) { return new (t || VotosService)(i0.ɵɵinject(i1.HttpClient)); };\r\nVotosService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: VotosService, factory: VotosService.ɵfac, providedIn: 'root' });\r\nfunction publicKeyToJson(pubKey) {\r\n    return {\r\n        e: bc.bigintToHex(pubKey.e),\r\n        n: bc.bigintToHex(pubKey.e)\r\n    };\r\n}\r\nfunction jsonToPublicKey(pubKeyJson) {\r\n    return new rsa.PublicKey(bc.hexToBigint(pubKeyJson.e), bc.hexToBigint(pubKeyJson.n));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}