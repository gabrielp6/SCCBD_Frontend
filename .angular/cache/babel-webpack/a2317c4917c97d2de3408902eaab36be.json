{"ast":null,"code":"import _asyncToGenerator from \"C:/SCCBD/PROYECTO FINAL/Proyecto_Ciber-main2222/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as bc from 'bigint-conversion';\nlet VotosComponent = class VotosComponent {\n  constructor(votosService) {\n    this.votosService = votosService;\n  } //Hacer variables para guardar los valores de la PublicKey\n  //Recibir los valores de la PublicKey (HECHO)\n  //Utilizarlos para crear la funcion de encrypt y verify\n\n\n  ngOnInit() {\n    return _asyncToGenerator(function* () {})();\n  } //Crear la funcion de encryptar con los valores de la clave publica (HECHO)\n\n\n  encrypt(mensaje) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const mensajeBigint = bc.textToBigint(mensaje.value);\n\n      const cifrado = _this.votosService.serverPublicKey.encrypt(mensajeBigint);\n\n      console.log(bc.bigintToHex(cifrado));\n      const plaintextHex = (yield _this.votosService.decrypt(bc.bigintToHex(cifrado))).message;\n      console.log(bc.bufToText(bc.hexToBuf(plaintextHex)));\n    })();\n  }\n\n  sign(mensaje) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const mensajeBigint = bc.textToBigint(mensaje.value);\n\n      const signed = _this2.votosService.privateKey.sign(mensajeBigint);\n\n      (yield _this2.votosService.verify(bc.bigintToHex(signed), _this2.votosService.publicKey)).subscribe(res => {\n        console.log(res);\n      });\n    })();\n  }\n\n};\nVotosComponent = __decorate([Component({\n  selector: 'app-votos',\n  templateUrl: './votos.component.html',\n  styleUrls: ['./votos.component.css']\n})], VotosComponent);\nexport { VotosComponent };","map":{"version":3,"sources":["C:/SCCBD/PROYECTO FINAL/Proyecto_Ciber-main2222/frontend/src/app/components/votos/votos.component.ts"],"names":["__decorate","Component","bc","VotosComponent","constructor","votosService","ngOnInit","encrypt","mensaje","mensajeBigint","textToBigint","value","cifrado","serverPublicKey","console","log","bigintToHex","plaintextHex","decrypt","message","bufToText","hexToBuf","sign","signed","privateKey","verify","publicKey","subscribe","res","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,IAAIC,cAAc,GAAG,MAAMA,cAAN,CAAqB;AACtCC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACH,GAHqC,CAItC;AACA;AACA;;;AACMC,EAAAA,QAAQ,GAAG;AAAA;AAChB,GARqC,CAStC;;;AACMC,EAAAA,OAAO,CAACC,OAAD,EAAU;AAAA;;AAAA;AACnB,YAAMC,aAAa,GAAGP,EAAE,CAACQ,YAAH,CAAgBF,OAAO,CAACG,KAAxB,CAAtB;;AACA,YAAMC,OAAO,GAAG,KAAI,CAACP,YAAL,CAAkBQ,eAAlB,CAAkCN,OAAlC,CAA0CE,aAA1C,CAAhB;;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYb,EAAE,CAACc,WAAH,CAAeJ,OAAf,CAAZ;AACA,YAAMK,YAAY,GAAG,OAAO,KAAI,CAACZ,YAAL,CAAkBa,OAAlB,CAA0BhB,EAAE,CAACc,WAAH,CAAeJ,OAAf,CAA1B,CAAP,EAA2DO,OAAhF;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYb,EAAE,CAACkB,SAAH,CAAalB,EAAE,CAACmB,QAAH,CAAYJ,YAAZ,CAAb,CAAZ;AALmB;AAMtB;;AACKK,EAAAA,IAAI,CAACd,OAAD,EAAU;AAAA;;AAAA;AAChB,YAAMC,aAAa,GAAGP,EAAE,CAACQ,YAAH,CAAgBF,OAAO,CAACG,KAAxB,CAAtB;;AACA,YAAMY,MAAM,GAAG,MAAI,CAAClB,YAAL,CAAkBmB,UAAlB,CAA6BF,IAA7B,CAAkCb,aAAlC,CAAf;;AACA,aAAO,MAAI,CAACJ,YAAL,CAAkBoB,MAAlB,CAAyBvB,EAAE,CAACc,WAAH,CAAeO,MAAf,CAAzB,EAAiD,MAAI,CAAClB,YAAL,CAAkBqB,SAAnE,CAAP,EAAsFC,SAAtF,CAAiGC,GAAD,IAAS;AACrGd,QAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACH,OAFD;AAHgB;AAMnB;;AAvBqC,CAA1C;AAyBAzB,cAAc,GAAGH,UAAU,CAAC,CACxBC,SAAS,CAAC;AACN4B,EAAAA,QAAQ,EAAE,WADJ;AAENC,EAAAA,WAAW,EAAE,wBAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,uBAAD;AAHL,CAAD,CADe,CAAD,EAMxB5B,cANwB,CAA3B;AAOA,SAASA,cAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport * as bc from 'bigint-conversion';\r\nlet VotosComponent = class VotosComponent {\r\n    constructor(votosService) {\r\n        this.votosService = votosService;\r\n    }\r\n    //Hacer variables para guardar los valores de la PublicKey\r\n    //Recibir los valores de la PublicKey (HECHO)\r\n    //Utilizarlos para crear la funcion de encrypt y verify\r\n    async ngOnInit() {\r\n    }\r\n    //Crear la funcion de encryptar con los valores de la clave publica (HECHO)\r\n    async encrypt(mensaje) {\r\n        const mensajeBigint = bc.textToBigint(mensaje.value);\r\n        const cifrado = this.votosService.serverPublicKey.encrypt(mensajeBigint);\r\n        console.log(bc.bigintToHex(cifrado));\r\n        const plaintextHex = (await this.votosService.decrypt(bc.bigintToHex(cifrado))).message;\r\n        console.log(bc.bufToText(bc.hexToBuf(plaintextHex)));\r\n    }\r\n    async sign(mensaje) {\r\n        const mensajeBigint = bc.textToBigint(mensaje.value);\r\n        const signed = this.votosService.privateKey.sign(mensajeBigint);\r\n        (await this.votosService.verify(bc.bigintToHex(signed), this.votosService.publicKey)).subscribe((res) => {\r\n            console.log(res);\r\n        });\r\n    }\r\n};\r\nVotosComponent = __decorate([\r\n    Component({\r\n        selector: 'app-votos',\r\n        templateUrl: './votos.component.html',\r\n        styleUrls: ['./votos.component.css']\r\n    })\r\n], VotosComponent);\r\nexport { VotosComponent };\r\n"]},"metadata":{},"sourceType":"module"}