{"ast":null,"code":"import _asyncToGenerator from \"C:/SCCBD/PROYECTO FINAL/Proyecto_Ciber-main2222/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as bcu from 'bigint-crypto-utils';\n\nclass PublicKey {\n  constructor(e, n) {\n    this.e = e;\n    this.n = n;\n  }\n\n  encrypt(plaintext) {\n    return bcu.modPow(plaintext, this.e, this.n);\n  }\n\n  verify(signed) {\n    return bcu.modPow(signed, this.e, this.n);\n  }\n\n}\n\nclass PrivateKey {\n  constructor(d, n) {\n    this.d = d;\n    this.n = n;\n  }\n\n  decrypt(ciphertext) {\n    return bcu.modPow(ciphertext, this.d, this.n);\n  }\n\n  sign(msg) {\n    return bcu.modPow(msg, this.d, this.n);\n  }\n\n}\n\nfunction generateKeys() {\n  return _generateKeys.apply(this, arguments);\n}\n\nfunction _generateKeys() {\n  _generateKeys = _asyncToGenerator(function* (bitlength = 1024) {\n    let p, q, n, phin;\n    const e = 65537n;\n\n    do {\n      p = yield bcu.prime(bitlength / 2 + 1);\n      q = yield bcu.prime(bitlength / 2);\n      n = p * q;\n      phin = (p - 1n) * (q - 1n);\n    } while (bcu.bitLength(n) !== bitlength || bcu.gcd(e, phin) > 1);\n\n    const d = bcu.modInv(e, phin);\n    const publicKey = new PublicKey(e, n);\n    const priateKey = new PrivateKey(d, n);\n    return {\n      publicKey: publicKey,\n      privateKey: priateKey\n    };\n  });\n  return _generateKeys.apply(this, arguments);\n}\n\nclass PublicKeyP {\n  constructor(n, g) {\n    this.n = n;\n    this.g = g;\n    this._n2 = this.n ** 2n;\n  }\n\n  encrypt(m, r) {\n    if (r === undefined) {\n      do {\n        r = bcu.randBetween(this.n);\n      } while (bcu.gcd(r, this.n) !== 1n);\n    }\n\n    return bcu.modPow(this.g, m, this._n2) * bcu.modPow(r, this.n, this._n2) % this._n2;\n  }\n\n}\n\nclass PrivateKeyP {\n  constructor(lambda, mu, publicKey, p, q) {\n    this.lambda = lambda;\n    this.mu = mu;\n    this._p = p;\n    this._q = q;\n    this.publicKey = publicKey;\n  }\n\n  decrypt(c) {\n    return L(bcu.modPow(c, this.lambda, this.publicKey._n2), this.publicKey.n) * this.mu % this.publicKey.n;\n  }\n\n}\n\nfunction generateKeysP() {\n  return _generateKeysP.apply(this, arguments);\n}\n\nfunction _generateKeysP() {\n  _generateKeysP = _asyncToGenerator(function* (bitlength = 3072, simpleVariant = false) {\n    let p, q, n, g, lambda, mu;\n\n    do {\n      p = yield bcu.prime(bitlength / 2 + 1);\n      q = yield bcu.prime(bitlength / 2);\n      n = p * q;\n    } while (bcu.bitLength(n) !== bitlength || q === p);\n\n    if (simpleVariant) {\n      g = n + 1n;\n      lambda = (q - 1n) * (q - 1n);\n      mu = bcu.modInv(lambda, n);\n    } else {\n      const n2 = n ** 2n;\n      g = getGenerator(n, n2);\n      lambda = bcu.lcm(p - 1n, q - 1n);\n      mu = bcu.modInv(L(bcu.modPow(g, lambda, n2)), n);\n    }\n\n    const publicKey = new PublicKeyP(n, g);\n    const priateKey = new PrivateKeyP(lambda, mu, publicKey, p, q);\n    return {\n      publicKey: publicKey,\n      privateKey: priateKey\n    };\n\n    function getGenerator(n, n2) {\n      const alpha = bcu.randBetween(n);\n      const beta = bcu.randBetween(n);\n      return (alpha * n + 1n) * bcu.modPow(beta, n, n2) % n2;\n    }\n  });\n  return _generateKeysP.apply(this, arguments);\n}\n\nfunction L(a, n) {\n  return a - 1n;\n}\n\nexport { PrivateKey, PrivateKeyP, PublicKey, PublicKeyP, generateKeys, generateKeysP };","map":{"version":3,"sources":["C:/SCCBD/PROYECTO FINAL/Proyecto_Ciber-main2222/my-rsa/dist/esm/index.browser.js"],"names":["bcu","PublicKey","constructor","e","n","encrypt","plaintext","modPow","verify","signed","PrivateKey","d","decrypt","ciphertext","sign","msg","generateKeys","bitlength","p","q","phin","prime","bitLength","gcd","modInv","publicKey","priateKey","privateKey","PublicKeyP","g","_n2","m","r","undefined","randBetween","PrivateKeyP","lambda","mu","_p","_q","c","L","generateKeysP","simpleVariant","n2","getGenerator","lcm","alpha","beta","a"],"mappings":"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","sourcesContent":["import * as bcu from 'bigint-crypto-utils';\n\nclass PublicKey {\n    constructor(e, n) {\n        this.e = e;\n        this.n = n;\n    }\n    encrypt(plaintext) {\n        return bcu.modPow(plaintext, this.e, this.n);\n    }\n    verify(signed) {\n        return bcu.modPow(signed, this.e, this.n);\n    }\n}\nclass PrivateKey {\n    constructor(d, n) {\n        this.d = d;\n        this.n = n;\n    }\n    decrypt(ciphertext) {\n        return bcu.modPow(ciphertext, this.d, this.n);\n    }\n    sign(msg) {\n        return bcu.modPow(msg, this.d, this.n);\n    }\n}\nasync function generateKeys(bitlength = 1024) {\n    let p, q, n, phin;\n    const e = 65537n;\n    do {\n        p = await bcu.prime(bitlength / 2 + 1);\n        q = await bcu.prime(bitlength / 2);\n        n = p * q;\n        phin = (p - 1n) * (q - 1n);\n    } while (bcu.bitLength(n) !== bitlength || bcu.gcd(e, phin) > 1);\n    const d = bcu.modInv(e, phin);\n    const publicKey = new PublicKey(e, n);\n    const priateKey = new PrivateKey(d, n);\n    return {\n        publicKey: publicKey,\n        privateKey: priateKey\n    };\n}\n\nclass PublicKeyP {\n    constructor(n, g) {\n        this.n = n;\n        this.g = g;\n        this._n2 = this.n ** 2n;\n    }\n    encrypt(m, r) {\n        if (r === undefined) {\n            do {\n                r = bcu.randBetween(this.n);\n            } while (bcu.gcd(r, this.n) !== 1n);\n        }\n        return (bcu.modPow(this.g, m, this._n2) * bcu.modPow(r, this.n, this._n2)) % this._n2;\n    }\n}\nclass PrivateKeyP {\n    constructor(lambda, mu, publicKey, p, q) {\n        this.lambda = lambda;\n        this.mu = mu;\n        this._p = p;\n        this._q = q;\n        this.publicKey = publicKey;\n    }\n    decrypt(c) {\n        return (L(bcu.modPow(c, this.lambda, this.publicKey._n2), this.publicKey.n) * this.mu) % this.publicKey.n;\n    }\n}\nasync function generateKeysP(bitlength = 3072, simpleVariant = false) {\n    let p, q, n, g, lambda, mu;\n    do {\n        p = await bcu.prime(bitlength / 2 + 1);\n        q = await bcu.prime(bitlength / 2);\n        n = p * q;\n    } while (bcu.bitLength(n) !== bitlength || q === p);\n    if (simpleVariant) {\n        g = n + 1n;\n        lambda = (q - 1n) * (q - 1n);\n        mu = bcu.modInv(lambda, n);\n    }\n    else {\n        const n2 = n ** 2n;\n        g = getGenerator(n, n2);\n        lambda = bcu.lcm(p - 1n, q - 1n);\n        mu = bcu.modInv(L(bcu.modPow(g, lambda, n2)), n);\n    }\n    const publicKey = new PublicKeyP(n, g);\n    const priateKey = new PrivateKeyP(lambda, mu, publicKey, p, q);\n    return {\n        publicKey: publicKey,\n        privateKey: priateKey\n    };\n    function getGenerator(n, n2) {\n        const alpha = bcu.randBetween(n);\n        const beta = bcu.randBetween(n);\n        return ((alpha * n + 1n) * bcu.modPow(beta, n, n2)) % n2;\n    }\n}\nfunction L(a, n) {\n    return (a - 1n);\n}\n\nexport { PrivateKey, PrivateKeyP, PublicKey, PublicKeyP, generateKeys, generateKeysP };\n"]},"metadata":{},"sourceType":"module"}